# Generated by Django 5.2.3 on 2025-08-23 04:08
import logging
from django.db import migrations
from issue.utils.extract_digits import _get_digits


def compute_order(issue, suppl_start=1000, spe_start=2000):
    if issue.supplement is not None:
        return suppl_start + _get_digits(issue.supplement)

    if not issue.number:
        return 1

    number_str = str(issue.number)
    if "spe" in number_str:
        parts = number_str.split("spe")[-1]
        return spe_start + _get_digits(parts)
    if number_str == "ahead":
        return 9999

    number = _get_digits(number_str)
    return number or 1

def compute_issue_pid_suffix(issue):
    return str(compute_order(issue)).zfill(4)

def load_field_order(apps, schema_editor):
    Issue = apps.get_model("issue", "Issue")

    batch = []
    BATCH_SIZE = 1000
    MAX_SMALLINT = 32767
    qs = Issue.objects.filter(order__isnull=True, issue_pid_suffix__isnull=True).only("id", "number", "supplement").iterator(chunk_size=BATCH_SIZE)
    for issue in qs:
        o = compute_order(issue)
        if o > MAX_SMALLINT:
            logging.error(f"Issue {issue.pk}: computed order {o} exceeds SMALLINT; number={issue.number!r}, supplement={issue.supplement!r}")
            continue
        issue.order = o
        issue.issue_pid_suffix = compute_issue_pid_suffix(issue)
        batch.append(issue)
        if len(batch) == BATCH_SIZE:
            logging.info(f"Loading order and issue pid suffix for {len(batch)} issues")
            Issue.objects.bulk_update(batch, ["order", "issue_pid_suffix"])
            batch.clear()
    if batch:
        logging.info(f"Loading order and issue pid suffix for {len(batch)} issues")
        Issue.objects.bulk_update(batch, ["order", "issue_pid_suffix"])

def undo_order_and_issue_pid_suffix(apps, schema_editor):
    Issue = apps.get_model("issue", "Issue")
    Issue.objects.update(order=None, issue_pid_suffix=None)

class Migration(migrations.Migration):

    dependencies = [
        ("issue", "0008_issue_issue_pid_suffix_issue_order"),
    ]

    operations = [
        migrations.RunPython(load_field_order, undo_order_and_issue_pid_suffix),
    ]
